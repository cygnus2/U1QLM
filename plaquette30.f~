CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE PROGRAM MAIN CONTROLS LATTICE CALCULATIONS                    
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      PROGRAM MAIN                                                      
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      PARAMETER (NCUBE = NX*NY*NT/2)
      COMMON /PROB/ P1, P2
      COMMON /MARK/ MARK, MARKL
      DIMENSION MARK(NCUBE), MARKL(NLINK)
      DIMENSION NHIST(-15:15)
      REAL J
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     MEANING OF THE PARAMETERS:                                       
C     NX = NUMBER OF LATTICE POINTS IN X DIRECTION           
C     NY = NUMBER OF LATTICE POINTS IN Y DIRECTION        
C     NT = NUMBER OF LATTICE POINTS IN TIME DIRECTION 
C     J = COUPLING CONSTANT                 
C     BETA = INVERSE TEMPERATURE
C     IEQUI = NUMBER OF ITERATIONS UNTIL EQUILIBRIUM IS ASSUMED
C     IMEAS = NUMBER OF MEASUREMENTS                 
C     IITER = NUMBER OF ITERATIONS PER MEASUREMENT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      J = 1.
      BETA = 3.6
      EPSI = 2./FLOAT(NT)                              
      IEQUI = 100
      IMEAS = 100
      IITER = 1                                 
      WRITE (6,1000) NX, NY, NT, J, BETA, IEQUI, IMEAS, IITER
 1000 FORMAT (//1H ,'U(1) QUANTUM LINK MODEL ON A ',I3,'*',I3,'*',
     *        I3,' LATTICE'/
     *        1H ,'WITH J = ',F6.3,' AND BETA = ',F6.3/ 
     *        1H ,'WITH THE TRIVIAL AND THE PLAQUETTE BREAK-UP ONLY',/// 
     *        1H ,'NUMBER OF ITERATIONS UNTIL EQUILIBRIUM = ',I8/
     *        1H ,'NUMBER OF MEASUREMENTS = ',I7/       
     *        1H ,'NUMBER OF ITERATIONS PER MEASUREMENT = ',I4//)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     DEFINE THE PROBABILITIES
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      X = EPSI*BETA*J
      EXPPX = EXP(X)
      EXPMX = EXP(-X)
      COSHX = (EXPPX + EXPMX)/2.
      SINHX = (EXPPX - EXPMX)/2.
      P1 = (1. + EXPMX)/2.
      P2 = P1/COSHX
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     DEFINE THE LATTICE NEIGHBORS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      CALL NEIGHBOR
      IMAX = IEQUI + IMEAS*IITER
      AVSIZE = 0.
      AVSIZE2 = 0.               
      AVW2 = 0.
      AVW4 = 0.               
      DO 5 NWIND = -15,15,1
      NHIST(NWIND) = 0
    5 CONTINUE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CREATE A START CONFIGURATION                     
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      CALL START
C      CALL CONFIG
      CALL HOT
      CALL CHECK (NONTRIV,NWIND)
      WRITE (6,*) ' NONTRIV, NWIND = ', NONTRIV, NWIND
      NWOLD = NWIND
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     UNMARK ALL CUBES AND ALL LINKS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      DO 10 IC = 1,NCUBE
      MARK(IC) = 0
   10 CONTINUE
      DO 20 IL = 1,NLINK
      MARKL(IL) = 0
   20 CONTINUE
      NMEAS = 0
      DO 30 ITER = 1,IMAX               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     UPDATE THE SYSTEM                                              
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      CALL CLUSTER (NCSIZE)
      CALL CHECK (NONTRIV,NWIND)
      WRITE (6,1500) ITER, NCSIZE, NONTRIV, NWIND
 1500 FORMAT (1H ,' ITER, NCSIZE, NONTRIV, NWIND = ',4I8)
      DW = FLOAT(NWOLD - NWIND)/2.
      W2 = DW*DW/NCSIZE
      NWOLD = NWIND
      IF ((ITER.GT.IEQUI).AND.(MOD(ITER - IEQUI,IITER).EQ.0)) THEN 
      NMEAS = NMEAS + 1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     COMPUTE THE AVERAGE CLUSTER SIZE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      AVSIZE = ((NMEAS - 1)*AVSIZE + FLOAT(NCSIZE))/NMEAS                 
      AVSIZE2 = ((NMEAS - 1)*AVSIZE2 + FLOAT(NCSIZE)**2)/NMEAS 
      AVW2 = ((NMEAS - 1)*AVW2 + W2)/NMEAS                 
      AVW4 = ((NMEAS - 1)*AVW4 + W2*W2)/NMEAS 
      NHIST(NWIND) = NHIST(NWIND) + 1
      END IF                                 
   30 CONTINUE                                                  
      DSIZE2 = SQRT(AVSIZE2 - AVSIZE**2)               
      WRITE (6,2000) AVSIZE, DSIZE2/SQRT(FLOAT(NMEAS - 1))
 2000 FORMAT (//1H ,'CLUSTER SIZE:    ',2F17.9)
      DW2 = SQRT(AVW4 - AVW2**2)               
      WRITE (6,3000) AVW2*NLINK, DW2*NLINK/SQRT(FLOAT(NMEAS - 1))
 3000 FORMAT (//1H ,'WINDING NUMBER SQUARED:    ',2F17.9)
      DO 40 NWIND = -15,15,1
      WRITE (6,*) ' NHIST(',NWIND,') = ', NHIST(NWIND)
   40 CONTINUE
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE NEIGHBOR DEFINES NEIGHBORS ON THE LATTICE    
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE NEIGHBOR                                
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      COMMON /NEIGHB/ NEIGH, ICUBE, IXC, IYC, ITC, IDIR
      COMMON /CONVER/ IL                               
      DIMENSION NEIGH(NLINK,7,2), ICUBE(NLINK,2)
      DIMENSION IXC(NLINK), IYC(NLINK), ITC(NLINK), IDIR(NLINK)
      DIMENSION IL(NX,NY,NT,2)                              
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     RELATE CARTESIAN TO LATTICE COORDINATES                
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      I = 1
      DO 10 ID = 1,2
      DO 10 IT = 1,NT
      DO 10 IY = 1,NY 
      DO 10 IX = 1,NX 
      IL(IX,IY,IT,ID) = I
      IXC(I) = IX
      IYC(I) = IY
      ITC(I) = IT
      IDIR(I) = ID
      I = I + 1
   10 CONTINUE 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     DEFINE NEIGHBORS           
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      DO 20 IX = 1,NX             
      IXP1 = MOD(IX,NX) + 1  
      IXM1 = MOD(IX-2+NX,NX) + 1 
      DO 20 IY = 1,NY       
      IYP1 = MOD(IY,NY) + 1      
      IYM1 = MOD(IY-2+NY,NY) + 1 
      DO 20 IT = 1,NT            
      ITP1 = MOD(IT,NT) + 1 
      ITM1 = MOD(IT-2+NT,NT) + 1
      ILXYT1 = IL(IX,IY,IT,1)
      ILXYT2 = IL(IX,IY,IT,2)
      IF (MOD(IT,2).EQ.1) THEN
      IF (MOD(IX+IY,2).EQ.0) THEN
      NEIGH(ILXYT1,1,1) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT1,2,1) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT1,3,1) = IL(IX,IY,IT,2)
      NEIGH(ILXYT1,4,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,5,1) = IL(IXP1,IY,ITP1,2)
      NEIGH(ILXYT1,6,1) = IL(IX,IYP1,ITP1,1)
      NEIGH(ILXYT1,7,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,1,1) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT2,2,1) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT2,3,1) = IL(IX,IY,IT,1)
      NEIGH(ILXYT2,4,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,5,1) = IL(IX,IYP1,ITP1,1)
      NEIGH(ILXYT2,6,1) = IL(IXP1,IY,ITP1,2)
      NEIGH(ILXYT2,7,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,1,2) = IL(IX,IYM1,IT,2)
      NEIGH(ILXYT1,2,2) = IL(IX,IYM1,IT,1)
      NEIGH(ILXYT1,3,2) = IL(IXP1,IYM1,IT,2)
      NEIGH(ILXYT1,4,2) = IL(IX,IY,ITM1,1)
      NEIGH(ILXYT1,5,2) = IL(IX,IYM1,ITM1,2)
      NEIGH(ILXYT1,6,2) = IL(IX,IYM1,ITM1,1)
      NEIGH(ILXYT1,7,2) = IL(IXP1,IYM1,ITM1,2)
      NEIGH(ILXYT2,1,2) = IL(IXM1,IY,IT,1)
      NEIGH(ILXYT2,2,2) = IL(IXM1,IY,IT,2)
      NEIGH(ILXYT2,3,2) = IL(IXM1,IYP1,IT,1)
      NEIGH(ILXYT2,4,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,5,2) = IL(IXM1,IY,ITM1,1)
      NEIGH(ILXYT2,6,2) = IL(IXM1,IY,ITM1,2)
      NEIGH(ILXYT2,7,2) = IL(IXM1,IYP1,ITM1,1)
      ELSE
      NEIGH(ILXYT1,1,1) = IL(IX,IYM1,IT,2)
      NEIGH(ILXYT1,2,1) = IL(IX,IYM1,IT,1)
      NEIGH(ILXYT1,3,1) = IL(IXP1,IYM1,IT,2)
      NEIGH(ILXYT1,4,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,5,1) = IL(IX,IYM1,ITP1,2)
      NEIGH(ILXYT1,6,1) = IL(IX,IYM1,ITP1,1)
      NEIGH(ILXYT1,7,1) = IL(IXP1,IYM1,ITP1,2)
      NEIGH(ILXYT2,1,1) = IL(IXM1,IY,IT,1)
      NEIGH(ILXYT2,2,1) = IL(IXM1,IY,IT,2)
      NEIGH(ILXYT2,3,1) = IL(IXM1,IYP1,IT,1)
      NEIGH(ILXYT2,4,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,5,1) = IL(IXM1,IY,ITP1,1)
      NEIGH(ILXYT2,6,1) = IL(IXM1,IY,ITP1,2)
      NEIGH(ILXYT2,7,1) = IL(IXM1,IYP1,ITP1,1)
      NEIGH(ILXYT1,1,2) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT1,2,2) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT1,3,2) = IL(IX,IY,IT,2)
      NEIGH(ILXYT1,4,2) = IL(IX,IY,ITM1,1)
      NEIGH(ILXYT1,5,2) = IL(IXP1,IY,ITM1,2)
      NEIGH(ILXYT1,6,2) = IL(IX,IYP1,ITM1,1)
      NEIGH(ILXYT1,7,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,1,2) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT2,2,2) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT2,3,2) = IL(IX,IY,IT,1)
      NEIGH(ILXYT2,4,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,5,2) = IL(IX,IYP1,ITM1,1)
      NEIGH(ILXYT2,6,2) = IL(IXP1,IY,ITM1,2)
      NEIGH(ILXYT2,7,2) = IL(IX,IY,ITM1,1)
      END IF
      ELSE
      IF (MOD(IX+IY,2).EQ.1) THEN
      NEIGH(ILXYT1,1,1) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT1,2,1) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT1,3,1) = IL(IX,IY,IT,2)
      NEIGH(ILXYT1,4,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,5,1) = IL(IXP1,IY,ITP1,2)
      NEIGH(ILXYT1,6,1) = IL(IX,IYP1,ITP1,1)
      NEIGH(ILXYT1,7,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,1,1) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT2,2,1) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT2,3,1) = IL(IX,IY,IT,1)
      NEIGH(ILXYT2,4,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,5,1) = IL(IX,IYP1,ITP1,1)
      NEIGH(ILXYT2,6,1) = IL(IXP1,IY,ITP1,2)
      NEIGH(ILXYT2,7,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,1,2) = IL(IX,IYM1,IT,2)
      NEIGH(ILXYT1,2,2) = IL(IX,IYM1,IT,1)
      NEIGH(ILXYT1,3,2) = IL(IXP1,IYM1,IT,2)
      NEIGH(ILXYT1,4,2) = IL(IX,IY,ITM1,1)
      NEIGH(ILXYT1,5,2) = IL(IX,IYM1,ITM1,2)
      NEIGH(ILXYT1,6,2) = IL(IX,IYM1,ITM1,1)
      NEIGH(ILXYT1,7,2) = IL(IXP1,IYM1,ITM1,2)
      NEIGH(ILXYT2,1,2) = IL(IXM1,IY,IT,1)
      NEIGH(ILXYT2,2,2) = IL(IXM1,IY,IT,2)
      NEIGH(ILXYT2,3,2) = IL(IXM1,IYP1,IT,1)
      NEIGH(ILXYT2,4,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,5,2) = IL(IXM1,IY,ITM1,1)
      NEIGH(ILXYT2,6,2) = IL(IXM1,IY,ITM1,2)
      NEIGH(ILXYT2,7,2) = IL(IXM1,IYP1,ITM1,1)
      ELSE
      NEIGH(ILXYT1,1,1) = IL(IX,IYM1,IT,2)
      NEIGH(ILXYT1,2,1) = IL(IX,IYM1,IT,1)
      NEIGH(ILXYT1,3,1) = IL(IXP1,IYM1,IT,2)
      NEIGH(ILXYT1,4,1) = IL(IX,IY,ITP1,1)
      NEIGH(ILXYT1,5,1) = IL(IX,IYM1,ITP1,2)
      NEIGH(ILXYT1,6,1) = IL(IX,IYM1,ITP1,1)
      NEIGH(ILXYT1,7,1) = IL(IXP1,IYM1,ITP1,2)
      NEIGH(ILXYT2,1,1) = IL(IXM1,IY,IT,1)
      NEIGH(ILXYT2,2,1) = IL(IXM1,IY,IT,2)
      NEIGH(ILXYT2,3,1) = IL(IXM1,IYP1,IT,1)
      NEIGH(ILXYT2,4,1) = IL(IX,IY,ITP1,2)
      NEIGH(ILXYT2,5,1) = IL(IXM1,IY,ITP1,1)
      NEIGH(ILXYT2,6,1) = IL(IXM1,IY,ITP1,2)
      NEIGH(ILXYT2,7,1) = IL(IXM1,IYP1,ITP1,1)
      NEIGH(ILXYT1,1,2) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT1,2,2) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT1,3,2) = IL(IX,IY,IT,2)
      NEIGH(ILXYT1,4,2) = IL(IX,IY,ITM1,1)
      NEIGH(ILXYT1,5,2) = IL(IXP1,IY,ITM1,2)
      NEIGH(ILXYT1,6,2) = IL(IX,IYP1,ITM1,1)
      NEIGH(ILXYT1,7,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,1,2) = IL(IX,IYP1,IT,1)
      NEIGH(ILXYT2,2,2) = IL(IXP1,IY,IT,2)
      NEIGH(ILXYT2,3,2) = IL(IX,IY,IT,1)
      NEIGH(ILXYT2,4,2) = IL(IX,IY,ITM1,2)
      NEIGH(ILXYT2,5,2) = IL(IX,IYP1,ITM1,1)
      NEIGH(ILXYT2,6,2) = IL(IXP1,IY,ITM1,2)
      NEIGH(ILXYT2,7,2) = IL(IX,IY,ITM1,1)
      END IF
      END IF
   20 CONTINUE
      I = 1                                   
      DO 30 IT = 1,NT
      ITP1 = MOD(IT,NT) + 1
      DO 30 IY = 1,NY
      IYP1 = MOD(IY,NY) + 1
      DO 30 IX = 1,NX
      IXP1 = MOD(IX,NX) + 1
      IF (MOD(IX+IY+IT,2).EQ.1) THEN
      ICUBE(IL(IX,IY,IT,1),1) = I
      ICUBE(IL(IX,IY,IT,2),1) = I
      ICUBE(IL(IXP1,IY,IT,2),1) = I
      ICUBE(IL(IX,IYP1,IT,1),1) = I
      ICUBE(IL(IX,IY,ITP1,1),2) = I
      ICUBE(IL(IX,IY,ITP1,2),2) = I
      ICUBE(IL(IXP1,IY,ITP1,2),2) = I
      ICUBE(IL(IX,IYP1,ITP1,1),2) = I
      I = I + 1
      END IF
   30 CONTINUE
      RETURN      
      END   
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE START MAKES A RANDOM START FOR ALL LINKS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE START
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      COMMON /LINK/ ISING
      COMMON /CONVER/ IL
      DIMENSION ISING(NLINK)
      DIMENSION IL(NX,NY,NT,2)
      DO 10 IX = 1,NX
      DO 10 IY = 1,NY
      DO 10 ID = 1,2
      ILINK = 0
      IF (RAN0(IDUM).GE.0.5) ILINK = 1
      DO 10 IT = 1,NT
      ISING(IL(IX,IY,IT,ID)) = ILINK
   10 CONTINUE
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE HOT MAKES A TOTALLY TWISTED START
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE HOT
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      COMMON /LINK/ ISING
      COMMON /CONVER/ IL
      DIMENSION ISING(NLINK)
      DIMENSION IL(NX,NY,NT,2)
      DO 10 IX = 1,NX
      DO 10 IY = 1,NY
      DO 10 IT = 1,NT
      IF (MOD(IX+IY+IT,2).EQ.1) THEN
      ISING(IL(IX,IY,IT,1)) = 1
      ISING(IL(IX,IY,IT,2)) = 0
      ELSE
      ISING(IL(IX,IY,IT,1)) = 0
      ISING(IL(IX,IY,IT,2)) = 1
      END IF 
   10 CONTINUE
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE CONFIG WRITES OUT THE CONFIGURATION
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE CONFIG
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      COMMON /LINK/ ISING
      COMMON /CONVER/ IL
      DIMENSION ISING(NLINK)
      DIMENSION IL(NX,NY,NT,2)
      OPEN (7,FILE='OUT.D',STATUS='NEW')
      DO 10 IT = 1,NT
      WRITE (6,1000) IT
      WRITE (7,1000) IT
 1000 FORMAT (/' TIME SLICE ',I3/)
      WRITE (6,3000) (ISING(IL(IX,1,IT,1)),IX=1,NX)
      WRITE (7,3000) (ISING(IL(IX,1,IT,1)),IX=1,NX)
      DO 10 IY = NY,1,-1
      WRITE (6,2000) (ISING(IL(IX,IY,IT,2)),IX=1,NX), 
     *                ISING(IL(1,IY,IT,2))
      WRITE (7,2000) (ISING(IL(IX,IY,IT,2)),IX=1,NX),
     *                ISING(IL(1,IY,IT,2))
 2000 FORMAT (30I2)
      WRITE (6,3000) (ISING(IL(IX,IY,IT,1)),IX=1,NX)
      WRITE (7,3000) (ISING(IL(IX,IY,IT,1)),IX=1,NX)
 3000 FORMAT (1H ,30('.',I1),'.')
   10 CONTINUE
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE CHECK CHECKS IF A CONFIGURATION IS ALLOWED
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE CHECK (NONTRIV,NWIND)
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      PARAMETER (NCUBE = NX*NY*NT/2)
      COMMON /LINK/ ISING
      COMMON /NEIGHB/ NEIGH, ICUBE, IXC, IYC, ITC, IDIR
      DIMENSION ISING(NLINK)
      DIMENSION NEIGH(NLINK,7,2), ICUBE(NLINK,2)
      DIMENSION IXC(NLINK), IYC(NLINK), ITC(NLINK), IDIR(NLINK)
      NONTRIV = 0
      NWIND = 0
      DO 10 IL = 1,NLINK
      DO 10 IC = 1,2
      IL1 = NEIGH(IL,1,IC)
      IL2 = NEIGH(IL,2,IC)
      IL3 = NEIGH(IL,3,IC)
      IL4 = NEIGH(IL,4,IC)
      IL5 = NEIGH(IL,5,IC)
      IL6 = NEIGH(IL,6,IC)
      IL7 = NEIGH(IL,7,IC)
      IF ((ISING(IL).EQ.ISING(IL4)).AND.(ISING(IL1).EQ.ISING(IL5)).AND.
     *    (ISING(IL2).EQ.ISING(IL6)).AND.(ISING(IL3).EQ.ISING(IL7)))
     *   THEN
      CONTINUE
      ELSE 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     COUNT THE NONTRIVIAL CUBES
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF ((ISING(IL).EQ.ISING(IL1)).AND.(ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3)).AND.(ISING(IL).NE.ISING(IL4)).AND.
     *    (ISING(IL).NE.ISING(IL5)).AND.(ISING(IL).EQ.ISING(IL6)).AND.
     *    (ISING(IL).EQ.ISING(IL7))) THEN
      NONTRIV = NONTRIV + 1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     FIGURE OUT THE CONTRIBUTION TO THE WINDING NUMBER
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF ((IXC(IL).EQ.1).AND.(IYC(IL).EQ.1).AND.
     *    (MOD(ITC(IL),2).EQ.1).AND.(IDIR(IL).EQ.1).AND.(IC.EQ.1)) THEN
      NWIND = NWIND + 2*ISING(IL) - 1
      END IF
      ELSE
      WRITE (6,*) ' FORBIDDEN CONFIGURATION ENCOUNTERED'
      STOP
      END IF
      END IF
   10 CONTINUE
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SUBROUTINE CLUSTER UPDATES LINKS USING SINGLE CLUSTERS              
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE CLUSTER (NCSIZE)     
      PARAMETER (NX = 30, NY = 30, NT = 100, NLINK = 2*NX*NY*NT)
      PARAMETER (NCUBE = NX*NY*NT/2)   
      COMMON /LINK/ ISING                      
      COMMON /MARK/ MARK, MARKL
      COMMON /NEIGHB/ NEIGH, ICUBE, IXC, IYC, ITC, IDIR
      COMMON /PROB/ P1, P2
      DIMENSION ISING(NLINK)                                    
      DIMENSION NEIGH(NLINK,7,2), ICUBE(NLINK,2)
      DIMENSION IXC(NLINK), IYC(NLINK), ITC(NLINK), IDIR(NLINK)
      DIMENSION MARK(NCUBE), MARKL(NLINK), LIST(NLINK)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     SELECT A RANDOM SITE TO START THE CLUSTER
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IL = NLINK*RAN0(IDUM) + 1
      M = 1
      I = 1
      LIST(I) = IL
      MARKL(IL) = 1
   20 CONTINUE
      IL = LIST(M)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CHECK OUT THE TWO CUBES ADJACENT TO THE LINK
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      DO 10 IC = 1,2
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     FIGURE OUT IF THE CUBE HAS BEEN VISITED BEFORE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      ILCUBE = ICUBE(IL,IC)
      IL1 = NEIGH(IL,1,IC)
      IL2 = NEIGH(IL,2,IC)
      IL3 = NEIGH(IL,3,IC)
      IL4 = NEIGH(IL,4,IC)
      IL5 = NEIGH(IL,5,IC)
      IL6 = NEIGH(IL,6,IC)
      IL7 = NEIGH(IL,7,IC)
      IF (MARK(ILCUBE).EQ.0) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     WE HAVE NOT VISITED THIS CUBE BEFORE
C     FIGURE OUT THE TYPE OF CUBE CONFIGURATION BY LOOKING AT THE
C     NEIGHBORS 1, 2, 3 AND 4
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF ((ISING(IL).EQ.ISING(IL1)).AND.
     *    (ISING(IL).EQ.ISING(IL2)).AND.
     *    (ISING(IL).EQ.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       +             +
C     +   +         +   +
C       +             +
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).NE.ISING(IL1)).AND.
     *    (ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       +             +
C     +   +         +   +
C       -             -
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).NE.ISING(IL1)).AND.
     *    (ISING(IL).EQ.ISING(IL2)).AND.
     *    (ISING(IL).EQ.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       +             +
C     +   -         +   -
C       +             +
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).EQ.ISING(IL1)).AND.
     *    (ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).EQ.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       -             -
C     +   +         +   +
C       +             +
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).EQ.ISING(IL1)).AND.
     *    (ISING(IL).EQ.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       +             +
C     -   +         -   +
C       +             +
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).NE.ISING(IL1)).AND.
     *    (ISING(IL).EQ.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       -             -
C     +   +         +   +
C       -             -
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).NE.ISING(IL1)).AND.
     *    (ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).EQ.ISING(IL3))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       +             +
C     -   +         -   +
C       -             -
C
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY 1, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      IF ((ISING(IL).EQ.ISING(IL1)).AND.
     *    (ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3)).AND.
     *    (ISING(IL).EQ.ISING(IL4))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       -             -
C     -   +         -   +
C       +             +
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF (RAN0(IDUM).LT.P2) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     PICK THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2      WITH PROBABILITY P2, MARK = 1
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 1
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      ELSE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     PICK THE PLAQUETTE BREAK UP
C
C       1             2
C     1   1         2   2      WITH PROBABILITY 1 - P2, MARK = 2
C       1             2  
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 2
      NEXT = IL1
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL2
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL3
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      END IF
      IF ((ISING(IL).EQ.ISING(IL1)).AND.
     *    (ISING(IL).NE.ISING(IL2)).AND.
     *    (ISING(IL).NE.ISING(IL3)).AND.
     *    (ISING(IL).NE.ISING(IL4))) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE SITUATION (UP TO A GLOBAL FLIP) IS
C     
C       -             +
C     -   +         +   -
C       +             -
C
C     PICK THE PLAQUETTE BREAK UP
C
C       1             2
C     1   1         2   2      WITH PROBABILITY 1, MARK = 2
C       1             2  
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      MARK(ILCUBE) = 2
      NEXT = IL1
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL2
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL3
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      ELSE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     WE HAVE VISITED THIS CUBE BEFORE
C     FIGURE OUT THE TYPE OF BREAKUP
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF (MARK(ILCUBE).EQ.1) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     IT IS THE TRIVIAL BREAK UP
C
C       3             3 
C     4   2         4   2  
C       1             1 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      ELSE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     IT IS A NONTRIVIAL BREAK UP
C     FIGURE OUT IF THE OTHER FOUR LINKS ARE ALSO IN THE CLUSTER
C     COUNT THE NUMBER OF MARKED SPINS IN THE CUBE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      NMARKL = 1
      IF (MARKL(IL1).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL2).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL3).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL4).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL5).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL6).EQ.1) NMARKL = NMARKL + 1
      IF (MARKL(IL7).EQ.1) NMARKL = NMARKL + 1
      IF (NMARKL.GT.4) THEN
      NEXT = IL1
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL2
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL3
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL4
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL5
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL6
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      NEXT = IL7
      IF (MARKL(NEXT).EQ.0) THEN
      I = I + 1
      LIST(I) = NEXT
      MARKL(NEXT) = 1
      END IF
      END IF
      END IF
      END IF
   10 CONTINUE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CHECK IF THERE IS ANOTHER MEMBER ON THE LIST
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      M = M + 1
      IF (M.LE.I) GO TO 20
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     FLIP ALL LINKS IN THE CLUSTER AND UNMARK THE CUBES AND THE LINKS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      DO 40 ILIST = 1,I
c      WRITE (6,*) LIST(ILIST)
c      WRITE (7,*) LIST(ILIST)
      MARK(ICUBE(LIST(ILIST),1)) = 0
      MARK(ICUBE(LIST(ILIST),2)) = 0
      MARKL(LIST(ILIST)) = 0
      ISING(LIST(ILIST)) = 1 - ISING(LIST(ILIST))
   40 CONTINUE
      NCSIZE = I
      RETURN                                        
      END                                        
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     THE RANDOM NUMBER GENERATOR
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      FUNCTION RAN0(IDUM)
      INTEGER IDUM, IA, IM, IQ, IR, MASK
      REAL RAN0, AM
      PARAMETER (IA = 16807, IM = 2147483647, AM = 1./IM,
     *           IQ = 127773, IR = 2836, MASK = 123459876)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     RETURNS A UNIFORM RANDOM NUMBER FROM [0,1]
C     SET INTEGER VALUE FOR IDUM (DIFFERENT FROM MASK)
C     DO NOT ALTER IDUM BETWEEN CALLS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      INTEGER K
      IDUM = IEOR(IDUM,MASK)
      K = IDUM/IQ
      IDUM = IA*(IDUM - K*IQ) - IR*K
      IF (IDUM.LT.0) IDUM = IDUM + IM
      RAN0 = AM*IDUM
      IDUM = IEOR(IDUM,MASK)
      RETURN
      END
